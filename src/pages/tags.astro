---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const allPosts = await getCollection('posts');
const tags = [...new Set(allPosts.flatMap(post => post.data.tags))];

// 统计每个标签的文章数量
const tagStats = tags.map(tag => {
  const count = allPosts.filter(post => 
    post.data.tags.includes(tag) && !post.data.draft
  ).length;
  return { tag, count };
}).sort((a, b) => b.count - a.count);
---

<Layout title="标签" description="所有文章标签">
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- 页面头部 -->
    <header class="text-center mb-12">
      <div class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-100 to-purple-100 dark:from-blue-900/30 dark:to-purple-900/30 text-blue-700 dark:text-blue-300 rounded-full text-sm font-medium mb-6">
        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path d="M17.707 9.293a1 1 0 010 1.414l-7 7a1 1 0 01-1.414 0l-7-7A.997.997 0 012 10V5a3 3 0 013-3h5c.256 0 .512.098.707.293l7 7zM5 6a1 1 0 100-2 1 1 0 000 2z"/>
        </svg>
        文章标签
      </div>
      <h1 class="text-5xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 dark:from-blue-400 dark:via-purple-400 dark:to-pink-400 bg-clip-text text-transparent mb-4">
        热门标签
      </h1>
      <p class="text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
        通过标签快速发现相关文章，探索技术话题的深度内容
      </p>
      <div class="mt-6 flex justify-center gap-6 text-sm">
        <div class="flex items-center gap-2 px-4 py-2 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 rounded-full">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path d="M17.707 9.293a1 1 0 010 1.414l-7 7a1 1 0 01-1.414 0l-7-7A.997.997 0 012 10V5a3 3 0 013-3h5c.256 0 .512.098.707.293l7 7zM5 6a1 1 0 100-2 1 1 0 000 2z"/>
          </svg>
          <span class="font-medium">{tags.length} 个标签</span>
        </div>
        <div class="flex items-center gap-2 px-4 py-2 bg-purple-50 dark:bg-purple-900/20 text-purple-700 dark:text-purple-300 rounded-full">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
          <span class="font-medium">{allPosts.length} 篇文章</span>
        </div>
      </div>
    </header>

    <!-- 标签云 -->
    <div class="bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-blue-900/20 dark:via-purple-900/20 dark:to-pink-900/20 rounded-3xl p-8 mb-12">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">标签云</h2>
      <div class="flex flex-wrap justify-center gap-3">
        {tagStats.map(({ tag, count }, index) => {
          const size = count > 5 ? 'text-lg' : count > 3 ? 'text-base' : 'text-sm';
          const opacity = count > 5 ? 'opacity-100' : count > 3 ? 'opacity-80' : 'opacity-60';
          
          // 根据索引分配不同颜色
          const colorClasses = [
            'bg-blue-100 hover:bg-blue-500 text-blue-700 hover:text-white',
            'bg-green-100 hover:bg-green-500 text-green-700 hover:text-white',
            'bg-purple-100 hover:bg-purple-500 text-purple-700 hover:text-white',
            'bg-pink-100 hover:bg-pink-500 text-pink-700 hover:text-white',
            'bg-yellow-100 hover:bg-yellow-500 text-yellow-700 hover:text-white',
            'bg-indigo-100 hover:bg-indigo-500 text-indigo-700 hover:text-white',
            'bg-red-100 hover:bg-red-500 text-red-700 hover:text-white',
            'bg-teal-100 hover:bg-teal-500 text-teal-700 hover:text-white'
          ];
          const colorClass = colorClasses[index % colorClasses.length];
          
          return (
            <a 
              href={`/tags/${tag}`}
              class={`group inline-flex items-center px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 hover:scale-105 shadow-sm hover:shadow-md ${size} ${opacity} ${colorClass}`}
            >
              #{tag}
              <span class="ml-2 px-2 py-1 bg-white/50 text-gray-600 rounded-lg text-xs group-hover:bg-white/20 group-hover:text-white">
                {count}
              </span>
            </a>
          );
        })}
      </div>
    </div>

    <!-- 标签列表 -->
    <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {tagStats.map(({ tag, count }, index) => {
        // 为每个标签卡片分配不同的颜色主题
        const colorThemes = [
          { bg: 'bg-blue-50', border: 'border-blue-200', text: 'text-blue-700', hover: 'hover:bg-blue-500', countBg: 'from-blue-500 to-blue-600' },
          { bg: 'bg-green-50', border: 'border-green-200', text: 'text-green-700', hover: 'hover:bg-green-500', countBg: 'from-green-500 to-green-600' },
          { bg: 'bg-purple-50', border: 'border-purple-200', text: 'text-purple-700', hover: 'hover:bg-purple-500', countBg: 'from-purple-500 to-purple-600' },
          { bg: 'bg-pink-50', border: 'border-pink-200', text: 'text-pink-700', hover: 'hover:bg-pink-500', countBg: 'from-pink-500 to-pink-600' },
          { bg: 'bg-yellow-50', border: 'border-yellow-200', text: 'text-yellow-700', hover: 'hover:bg-yellow-500', countBg: 'from-yellow-500 to-yellow-600' },
          { bg: 'bg-indigo-50', border: 'border-indigo-200', text: 'text-indigo-700', hover: 'hover:bg-indigo-500', countBg: 'from-indigo-500 to-indigo-600' }
        ];
        const theme = colorThemes[index % colorThemes.length];
        
        return (
          <a 
            href={`/tags/${tag}`}
            class={`group ${theme.bg} dark:bg-gray-800 rounded-2xl border ${theme.border} dark:border-gray-700 p-6 hover:shadow-lg hover:shadow-${theme.hover.split('-')[1]}-500/20 transition-all duration-300 hover:-translate-y-1`}
          >
            <div class="flex items-center justify-between mb-4">
              <h3 class={`text-xl font-bold ${theme.text} dark:text-white group-hover:text-white transition-colors`}>
                #{tag}
              </h3>
              <div class={`w-8 h-8 bg-gradient-to-br ${theme.countBg} rounded-lg flex items-center justify-center`}>
                <span class="text-white font-bold text-sm">{count}</span>
              </div>
            </div>
            
            <div class="flex items-center justify-between">
              <p class="text-gray-600 dark:text-gray-400 text-sm">
                {count} 篇文章
              </p>
              <svg class={`w-4 h-4 text-gray-400 group-hover:text-white transition-colors`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
              </svg>
            </div>
          </a>
        );
      })}
    </div>
  </div>
</Layout>
