---
// Coze 智能助手聊天组件
export interface Props {
  botId?: string;
  title?: string;
  token?: string;
}

const {
  botId = import.meta.env.PUBLIC_COZE_BOT_ID,
  title = import.meta.env.PUBLIC_COZE_TITLE || '智能助手',
  token = import.meta.env.PUBLIC_COZE_TOKEN
} = Astro.props;
---

<!-- 使用环境变量的 Coze 集成 -->
<script src="https://lf-cdn.coze.cn/obj/unpkg/flow-platform/chat-app-sdk/1.2.0-beta.10/libs/cn/index.js" onerror="console.error('Failed to load Coze SDK')"></script>
<script define:vars={{ botId, title, token }}>
  console.log('CozeChat 组件初始化...');
  console.log('Bot ID:', botId);
  console.log('Title:', title);
  console.log('Token:', token ? '已设置' : '未设置');
  
  // 检查 token 是否配置
  if (!token || token === '') {
    console.warn('Coze: 请通过环境变量 PUBLIC_COZE_TOKEN 配置 token');
    return;
  }
  
  // 等待页面加载完成后初始化
  document.addEventListener('DOMContentLoaded', function() {
    console.log('CozeChat 组件开始初始化...');
    
    // 添加延迟确保 SDK 完全加载
    setTimeout(() => {
      if (typeof CozeWebSDK !== 'undefined') {
        try {
          const chatClient = new CozeWebSDK.WebChatClient({
            config: {
              bot_id: botId,
            },
            componentProps: {
              title: title,
            },
            auth: {
              type: 'token',
              token: token,
              onRefreshToken: function () {
                return token;
              }
            }
          });
          console.log('CozeChat 组件初始化成功:', chatClient);
        } catch (error) {
          console.error('CozeChat 组件初始化失败:', error);
        }
      } else {
        console.error('CozeWebSDK 未加载');
      }
    }, 1000);
  });
</script>
