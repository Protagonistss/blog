---
import BaseLayout from './BaseLayout.astro';
import Comments from '../components/Comments.astro';
import { getCollection } from 'astro:content';
import { calculateReadingTime } from '../utils/readingTime';
import { getRelatedPosts } from '../utils/posts';
import { formatDate, formatDateISO } from '../utils/date';
import { getArticleDates } from '../utils/articleDates';

export interface Props {
  frontmatter: any;
  content?: string;
}

const { frontmatter, content } = Astro.props;

// 计算阅读时间
const readingTime = content ? calculateReadingTime(content) : 5;

// 获取文章的实际文件路径和日期信息
let fileModifiedTime = null;
try {
  // 尝试从文件系统获取真实的修改时间
  // URL: /posts/css/css-css-样式选中 -> 文件: src/content/posts/css/css-css-样式选中.md
  const urlPath = Astro.url.pathname.replace('/posts/', '');
  // 解码 URL 编码的字符
  const decodedPath = decodeURIComponent(urlPath);
  const filePath = `src/content/posts/${decodedPath}.md`;
  const articleDates = getArticleDates(filePath);
  fileModifiedTime = articleDates?.fileModifiedTime;
} catch (error) {
  // 如果无法获取文件信息，忽略错误
  console.warn('无法获取文件系统时间:', error);
}

// 确定要显示的更新时间：优先使用 frontmatter 中的 updatedDate，否则使用文件修改时间
const displayUpdatedDate = frontmatter.updatedDate || fileModifiedTime;

// 获取相关文章
const allPosts = await getCollection('posts');
const relatedPosts = getRelatedPosts(
  { slug: Astro.params.slug, data: frontmatter } as any, 
  allPosts, 
  3
);
---

<BaseLayout title={frontmatter.title} description={frontmatter.description}>
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- 文章内容 -->
      <article class="lg:col-span-3">
        <header class="mb-12">
          <!-- 面包屑导航 -->
          <div class="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400 mb-6">
            <a href="/" class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">首页</a>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
            <span>文章详情</span>
          </div>
          
          <!-- 文章标题 -->
          <div class="flex items-start justify-between gap-4 mb-8">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white leading-tight flex-1">
              {frontmatter.title}
            </h1>
            
            <!-- 复制文章内容按钮 -->
            <button 
              id="copyArticleBtn"
              class="flex-shrink-0 p-3 text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-all duration-200 group"
              title="复制文章 Markdown 内容"
              aria-label="复制文章内容"
              data-original-content={content || ''}
              data-title={frontmatter.title}
              data-description={frontmatter.description || ''}
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
            </button>
          </div>
          
          <!-- 文章描述 -->
          {frontmatter.description && (
            <p class="text-lg text-gray-600 dark:text-gray-400 mb-8 leading-relaxed">
              {frontmatter.description}
            </p>
          )}
          
          <!-- 文章元信息 -->
          <div class="flex flex-wrap items-center gap-6 text-sm text-gray-600 dark:text-gray-400 mb-8 p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
              </svg>
              <time datetime={formatDateISO(frontmatter.pubDate)}>
                发布时间：{formatDate(frontmatter.pubDate)}
              </time>
            </div>
            
            {displayUpdatedDate && (
              <div class="flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                </svg>
                <time datetime={formatDateISO(displayUpdatedDate)}>
                  最后更新：{formatDate(displayUpdatedDate)}
                </time>
              </div>
            )}
            
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <span>约 {readingTime} 分钟阅读</span>
            </div>
          </div>
          
        </header>
        
        <div class="prose prose-lg max-w-none dark:prose-invert prose-headings:scroll-mt-20 prose-pre:bg-gray-900 prose-pre:text-gray-100 prose-code:bg-gray-100 prose-code:text-red-600 dark:prose-code:bg-gray-800 dark:prose-code:text-red-400">
          <slot />
        </div>
      </article>
      
      <!-- 侧边栏 -->
      <aside class="lg:col-span-1">
        <div class="sticky top-24 space-y-6">
          <!-- 文章信息 -->
          <div class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-sm">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
              <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              文章信息
            </h3>
            <div class="space-y-4 text-sm">
              <div class="flex justify-between items-center">
                <span class="text-gray-600 dark:text-gray-400">发布时间</span>
                <span class="text-gray-900 dark:text-white font-medium">{formatDate(frontmatter.pubDate)}</span>
              </div>
              {displayUpdatedDate && (
                <div class="flex justify-between items-center">
                  <span class="text-gray-600 dark:text-gray-400">最后更新</span>
                  <span class="text-gray-900 dark:text-white font-medium">{formatDate(displayUpdatedDate)}</span>
                </div>
              )}
              <div class="flex justify-between items-center">
                <span class="text-gray-600 dark:text-gray-400">阅读时间</span>
                <span class="text-gray-900 dark:text-white font-medium">约 {readingTime} 分钟</span>
              </div>
            </div>
          </div>
          
          <!-- 分类标签 -->
          {(frontmatter.categories && frontmatter.categories.length > 0) || (frontmatter.tags && frontmatter.tags.length > 0) ? (
            <div class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-sm">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
                <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"/>
                </svg>
                分类标签
              </h3>
              
              {frontmatter.categories && frontmatter.categories.length > 0 && (
                <div class="mb-4">
                  <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">分类</h4>
                  <div class="flex flex-wrap gap-2">
                    {frontmatter.categories.map((category: string) => (
                      <a 
                        href={`/categories/${category}`}
                        class="px-3 py-1 bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 rounded-full text-xs font-medium hover:bg-blue-100 dark:hover:bg-blue-900/50 transition-colors border border-blue-200 dark:border-blue-700"
                      >
                        {category}
                      </a>
                    ))}
                  </div>
                </div>
              )}
              
              {frontmatter.tags && frontmatter.tags.length > 0 && (
                <div>
                  <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">标签</h4>
                  <div class="flex flex-wrap gap-1.5">
                    {frontmatter.tags.map((tag: string) => (
                      <a 
                        href={`/tags/${tag}`}
                        class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-md text-xs hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                      >
                        #{tag}
                      </a>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ) : null}
          
          <!-- 目录 -->
          <div class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-sm">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
              <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"/>
              </svg>
              目录
            </h3>
            <div id="toc" class="text-sm">
              <div class="text-gray-600 dark:text-gray-400">
                <p>正在生成目录...</p>
              </div>
            </div>
          </div>
          
          <!-- 分享按钮 -->
          <div class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 shadow-sm">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
              <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
              </svg>
              分享文章
            </h3>
            <button 
              id="copyLinkBtn"
              class="w-full px-4 py-3 bg-blue-500 text-white rounded-lg text-sm font-medium hover:bg-blue-600 transition-colors flex items-center justify-center gap-2 shadow-sm"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
              复制链接
            </button>
          </div>
        </div>
      </aside>
    </div>
    
    <!-- 评论区域 -->
    <Comments title={frontmatter.title} slug={Astro.params.slug || ''} />
    
    {relatedPosts.length > 0 && (
      <section class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-8 flex items-center gap-2">
          <svg class="w-6 h-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
          </svg>
          相关文章
        </h2>
        <div class="grid gap-6 md:grid-cols-3">
          {relatedPosts.map(post => (
            <a 
              href={`/posts/${post.slug}`}
              class="group block p-6 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl hover:shadow-lg hover:shadow-blue-500/10 transition-all duration-300 hover:-translate-y-1"
            >
              <h3 class="font-semibold text-gray-900 dark:text-white mb-3 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors line-clamp-2">
                {post.data.title}
              </h3>
              <div class="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                </svg>
                <time>{post.data.pubDate.toLocaleDateString('zh-CN')}</time>
              </div>
            </a>
          ))}
        </div>
      </section>
    )}
  </article>

  <script>
    // 生成目录功能
    function generateTOC() {
      const tocContainer = document.getElementById('toc');
      const headings = document.querySelectorAll('.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6');
      
      if (!tocContainer) return;
      
      if (headings.length === 0) {
        tocContainer.innerHTML = '<div class="text-gray-600 dark:text-gray-400"><p>暂无目录</p></div>';
        return;
      }

      let tocHTML = '<nav class="space-y-1">';
      let currentLevel = 0;
      
      headings.forEach((heading, index) => {
        const level = parseInt(heading.tagName.charAt(1));
        const id = `heading-${index}`;
        heading.id = id;
        
        const indent = level > 2 ? `ml-${(level - 2) * 4}` : '';
        const text = heading.textContent?.trim() || '';
        
        if (level > currentLevel) {
          currentLevel = level;
        } else if (level < currentLevel) {
          currentLevel = level;
        }
        
        tocHTML += `
          <a 
            href="#${id}" 
            class="block py-1 px-2 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded transition-colors ${indent}"
            data-level="${level}"
          >
            ${text}
          </a>
        `;
      });
      
      tocHTML += '</nav>';
      tocContainer.innerHTML = tocHTML;
      
      // 添加滚动监听
      addScrollListener();
    }

    // 添加滚动监听，高亮当前章节
    function addScrollListener() {
      const tocLinks = document.querySelectorAll('#toc a');
      const headings = document.querySelectorAll('.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6');
      
      function updateActiveTOC() {
        let current = '';
        headings.forEach(heading => {
          const rect = heading.getBoundingClientRect();
          if (rect.top <= 100) {
            current = heading.id;
          }
        });
        
        tocLinks.forEach(link => {
          link.classList.remove('text-blue-600', 'dark:text-blue-400', 'bg-blue-50', 'dark:bg-blue-900/20');
          if (link.getAttribute('href') === `#${current}`) {
            link.classList.add('text-blue-600', 'dark:text-blue-400', 'bg-blue-50', 'dark:bg-blue-900/20');
          }
        });
      }
      
      window.addEventListener('scroll', updateActiveTOC);
      updateActiveTOC(); // 初始调用
    }

    // 复制文章内容功能
    function initCopyArticle() {
      const copyArticleBtn = document.getElementById('copyArticleBtn');
      
      if (!copyArticleBtn) return;
      
      copyArticleBtn.addEventListener('click', async () => {
        try {
          // 从 data 属性获取原始 Markdown 内容
          const title = copyArticleBtn.dataset.title || '';
          const description = copyArticleBtn.dataset.description || '';
          const originalContent = copyArticleBtn.dataset.originalContent || '';
          
          // 构建要复制的 Markdown 文本
          let articleText = `# ${title}\n\n`;
          if (description) {
            articleText += `${description}\n\n`;
          }
          articleText += originalContent;
          
          // 复制到剪贴板
          await navigator.clipboard.writeText(articleText);
          
          // 更新按钮状态
          const originalHTML = copyArticleBtn.innerHTML;
          copyArticleBtn.innerHTML = `
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
          `;
          copyArticleBtn.classList.add('text-green-600', 'dark:text-green-400');
          copyArticleBtn.classList.remove('text-gray-500', 'dark:text-gray-400');
          copyArticleBtn.title = '已复制到剪贴板';
          
          // 2秒后恢复原状
          setTimeout(() => {
            copyArticleBtn.innerHTML = originalHTML;
            copyArticleBtn.classList.remove('text-green-600', 'dark:text-green-400');
            copyArticleBtn.classList.add('text-gray-500', 'dark:text-gray-400');
            copyArticleBtn.title = '复制文章 Markdown 内容';
          }, 2000);
          
        } catch (err) {
          console.error('复制失败:', err);
          // 降级方案：使用传统的复制方法
          const title = copyArticleBtn.dataset.title || '';
          const description = copyArticleBtn.dataset.description || '';
          const originalContent = copyArticleBtn.dataset.originalContent || '';
          
          let articleText = `# ${title}\n\n`;
          if (description) {
            articleText += `${description}\n\n`;
          }
          articleText += originalContent;
          
          const textArea = document.createElement('textarea');
          textArea.value = articleText;
          document.body.appendChild(textArea);
          textArea.select();
          document.execCommand('copy');
          document.body.removeChild(textArea);
          
          // 显示成功状态
          const originalHTML = copyArticleBtn.innerHTML;
          copyArticleBtn.innerHTML = `
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
          `;
          copyArticleBtn.classList.add('text-green-600', 'dark:text-green-400');
          copyArticleBtn.classList.remove('text-gray-500', 'dark:text-gray-400');
          copyArticleBtn.title = '已复制到剪贴板';
          
          setTimeout(() => {
            copyArticleBtn.innerHTML = originalHTML;
            copyArticleBtn.classList.remove('text-green-600', 'dark:text-green-400');
            copyArticleBtn.classList.add('text-gray-500', 'dark:text-gray-400');
            copyArticleBtn.title = '复制文章 Markdown 内容';
          }, 2000);
        }
      });
    }

    // 分享功能
    function initShareButtons() {
      const copyLinkBtn = document.getElementById('copyLinkBtn');
      const articleUrl = window.location.href;
      
      // 复制链接功能
      copyLinkBtn?.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(articleUrl);
          const originalText = copyLinkBtn.innerHTML;
          copyLinkBtn.innerHTML = `
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
            已复制
          `;
          copyLinkBtn.classList.add('bg-green-500', 'hover:bg-green-600');
          copyLinkBtn.classList.remove('bg-blue-500', 'hover:bg-blue-600');
          
          setTimeout(() => {
            copyLinkBtn.innerHTML = originalText;
            copyLinkBtn.classList.remove('bg-green-500', 'hover:bg-green-600');
            copyLinkBtn.classList.add('bg-blue-500', 'hover:bg-blue-600');
          }, 2000);
        } catch (err) {
          console.error('复制失败:', err);
          alert('复制失败，请手动复制链接');
        }
      });
    }

    // 键盘快捷键支持
    function initKeyboardShortcuts() {
      document.addEventListener('keydown', (e) => {
        // 移除 Ctrl+C 复制整个文章的功能，让用户正常复制选中的文本
        // 保留复制按钮的点击功能，但不再拦截 Ctrl+C 快捷键
        const target = e.target as HTMLElement;
        
        // 只在特定情况下阻止默认行为（比如在复制按钮上按 Ctrl+C）
        if ((e.ctrlKey || e.metaKey) && e.key === 'c' && target && target.id === 'copyArticleBtn') {
          e.preventDefault();
          target.click();
        }
      });
    }

    // 代码块复制功能
    function initCodeCopyButtons() {
      // 为所有代码块添加复制按钮
      const codeBlocks = document.querySelectorAll('.prose pre');
      
      codeBlocks.forEach((pre, index) => {
        // 创建包装容器
        const wrapper = document.createElement('div');
        wrapper.className = 'code-block-wrapper group';
        
        // 创建复制按钮
        const copyBtn = document.createElement('button');
        copyBtn.className = 'code-copy-btn';
        copyBtn.innerHTML = `
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
          </svg>
        `;
        copyBtn.title = '复制代码';
        
        // 获取代码内容
        const codeElement = pre.querySelector('code');
        const codeText = codeElement ? codeElement.textContent || '' : pre.textContent || '';
        
        // 添加点击事件
        copyBtn.addEventListener('click', async (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          try {
            await navigator.clipboard.writeText(codeText);
            
            // 更新按钮状态
            copyBtn.classList.add('copied');
            copyBtn.innerHTML = `
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
              </svg>
            `;
            copyBtn.title = '已复制';
            
            // 2秒后恢复原状
            setTimeout(() => {
              copyBtn.classList.remove('copied');
              copyBtn.innerHTML = `
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                </svg>
              `;
              copyBtn.title = '复制代码';
            }, 2000);
            
          } catch (err) {
            console.error('复制失败:', err);
            
            // 降级方案：使用传统的复制方法
            const textArea = document.createElement('textarea');
            textArea.value = codeText;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            try {
              document.execCommand('copy');
              
              // 更新按钮状态
              copyBtn.classList.add('copied');
              copyBtn.innerHTML = `
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                </svg>
              `;
              copyBtn.title = '已复制';
              
              setTimeout(() => {
                copyBtn.classList.remove('copied');
                copyBtn.innerHTML = `
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                  </svg>
                `;
                copyBtn.title = '复制代码';
              }, 2000);
              
            } catch (fallbackErr) {
              console.error('降级复制也失败:', fallbackErr);
              alert('复制失败，请手动选择并复制代码');
            } finally {
              document.body.removeChild(textArea);
            }
          }
        });
        
        // 包装代码块
        pre.parentNode?.insertBefore(wrapper, pre);
        wrapper.appendChild(pre);
        wrapper.appendChild(copyBtn);
      });
    }

    // 页面加载完成后初始化
    document.addEventListener('DOMContentLoaded', () => {
      generateTOC();
      initShareButtons();
      initCopyArticle();
      initKeyboardShortcuts();
      initCodeCopyButtons();
    });
  </script>
</BaseLayout>
