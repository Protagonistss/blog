---
import Layout from './Layout.astro';
import { getCollection } from 'astro:content';
import { calculateReadingTime } from '../utils/readingTime';
import { getRelatedPosts } from '../utils/posts';
import { formatDate, formatDateISO } from '../utils/date';

export interface Props {
  frontmatter: any;
  content?: string;
}

const { frontmatter, content } = Astro.props;

// 计算阅读时间
const readingTime = content ? calculateReadingTime(content) : 5;

// 获取相关文章
const allPosts = await getCollection('posts');
const relatedPosts = getRelatedPosts(
  { slug: Astro.params.slug, data: frontmatter } as any, 
  allPosts, 
  3
);
---

<Layout title={frontmatter.title} description={frontmatter.description}>
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- 文章内容 -->
      <article class="lg:col-span-3">
        <header class="mb-8">
          <div class="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400 mb-4">
            <a href="/" class="hover:text-primary-600 dark:hover:text-primary-400 transition-colors">首页</a>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
            </svg>
            <span>文章详情</span>
          </div>
          
          <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6 leading-tight">
            {frontmatter.title}
          </h1>
          
          <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-6">
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
              </svg>
              <time datetime={formatDateISO(frontmatter.pubDate)}>
                {formatDate(frontmatter.pubDate)}
              </time>
            </div>
            
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <span>约 {readingTime} 分钟阅读</span>
            </div>
          </div>
          
          {frontmatter.categories && frontmatter.categories.length > 0 && (
            <div class="flex flex-wrap gap-2 mb-4">
              {frontmatter.categories.map((category: string) => (
                <a 
                  href={`/categories/${category}`}
                  class="px-3 py-1 bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 rounded-full text-sm font-medium hover:bg-primary-200 dark:hover:bg-primary-800 transition-colors"
                >
                  {category}
                </a>
              ))}
            </div>
          )}
          
          {frontmatter.tags && frontmatter.tags.length > 0 && (
            <div class="flex flex-wrap gap-2">
              {frontmatter.tags.map((tag: string) => (
                <a 
                  href={`/tags/${tag}`}
                  class="px-2 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-md text-sm hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                >
                  #{tag}
                </a>
              ))}
            </div>
          )}
        </header>
        
        <div class="prose prose-lg max-w-none dark:prose-invert prose-headings:scroll-mt-20">
          <slot />
        </div>
      </article>
      
      <!-- 侧边栏 -->
      <aside class="lg:col-span-1">
        <div class="sticky top-24 space-y-6">
          <!-- 文章信息 -->
          <div class="bg-white dark:bg-gray-800 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">文章信息</h3>
            <div class="space-y-3 text-sm">
              <div class="flex justify-between">
                <span class="text-gray-600 dark:text-gray-400">发布时间</span>
                <span class="text-gray-900 dark:text-white">{formatDate(frontmatter.pubDate)}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600 dark:text-gray-400">阅读时间</span>
                <span class="text-gray-900 dark:text-white">约 {readingTime} 分钟</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600 dark:text-gray-400">分类</span>
                <span class="text-gray-900 dark:text-white">{frontmatter.categories?.length || 0} 个</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600 dark:text-gray-400">标签</span>
                <span class="text-gray-900 dark:text-white">{frontmatter.tags?.length || 0} 个</span>
              </div>
            </div>
          </div>
          
          <!-- 目录 -->
          <div class="bg-white dark:bg-gray-800 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">目录</h3>
            <div id="toc" class="text-sm">
              <div class="text-gray-600 dark:text-gray-400">
                <p>正在生成目录...</p>
              </div>
            </div>
          </div>
          
          <!-- 分享按钮 -->
          <div class="bg-white dark:bg-gray-800 rounded-2xl border border-gray-200 dark:border-gray-700 p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">分享文章</h3>
            <button 
              id="copyLinkBtn"
              class="w-full px-4 py-3 bg-blue-500 text-white rounded-lg text-sm font-medium hover:bg-blue-600 transition-colors flex items-center justify-center gap-2"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
              复制链接
            </button>
          </div>
        </div>
      </aside>
    </div>
    
    {relatedPosts.length > 0 && (
      <section class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
        <h2 class="text-2xl font-bold mb-6">相关文章</h2>
        <div class="grid gap-4 md:grid-cols-3">
          {relatedPosts.map(post => (
            <a 
              href={`/posts/${post.slug}`}
              class="block p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:shadow-md transition-shadow"
            >
              <h3 class="font-semibold mb-2">{post.data.title}</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">
                {post.data.pubDate.toLocaleDateString('zh-CN')}
              </p>
            </a>
          ))}
        </div>
      </section>
    )}
  </article>

  <script>
    // 生成目录功能
    function generateTOC() {
      const tocContainer = document.getElementById('toc');
      const headings = document.querySelectorAll('.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6');
      
      if (headings.length === 0) {
        tocContainer.innerHTML = '<div class="text-gray-600 dark:text-gray-400"><p>暂无目录</p></div>';
        return;
      }

      let tocHTML = '<nav class="space-y-1">';
      let currentLevel = 0;
      
      headings.forEach((heading, index) => {
        const level = parseInt(heading.tagName.charAt(1));
        const id = `heading-${index}`;
        heading.id = id;
        
        const indent = level > 2 ? `ml-${(level - 2) * 4}` : '';
        const text = heading.textContent.trim();
        
        if (level > currentLevel) {
          currentLevel = level;
        } else if (level < currentLevel) {
          currentLevel = level;
        }
        
        tocHTML += `
          <a 
            href="#${id}" 
            class="block py-1 px-2 text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded transition-colors ${indent}"
            data-level="${level}"
          >
            ${text}
          </a>
        `;
      });
      
      tocHTML += '</nav>';
      tocContainer.innerHTML = tocHTML;
      
      // 添加滚动监听
      addScrollListener();
    }

    // 添加滚动监听，高亮当前章节
    function addScrollListener() {
      const tocLinks = document.querySelectorAll('#toc a');
      const headings = document.querySelectorAll('.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6');
      
      function updateActiveTOC() {
        let current = '';
        headings.forEach(heading => {
          const rect = heading.getBoundingClientRect();
          if (rect.top <= 100) {
            current = heading.id;
          }
        });
        
        tocLinks.forEach(link => {
          link.classList.remove('text-blue-600', 'dark:text-blue-400', 'bg-blue-50', 'dark:bg-blue-900/20');
          if (link.getAttribute('href') === `#${current}`) {
            link.classList.add('text-blue-600', 'dark:text-blue-400', 'bg-blue-50', 'dark:bg-blue-900/20');
          }
        });
      }
      
      window.addEventListener('scroll', updateActiveTOC);
      updateActiveTOC(); // 初始调用
    }

    // 分享功能
    function initShareButtons() {
      const copyLinkBtn = document.getElementById('copyLinkBtn');
      const articleUrl = window.location.href;
      
      // 复制链接功能
      copyLinkBtn?.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(articleUrl);
          const originalText = copyLinkBtn.innerHTML;
          copyLinkBtn.innerHTML = `
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
            已复制
          `;
          copyLinkBtn.classList.add('bg-green-500', 'hover:bg-green-600');
          copyLinkBtn.classList.remove('bg-blue-500', 'hover:bg-blue-600');
          
          setTimeout(() => {
            copyLinkBtn.innerHTML = originalText;
            copyLinkBtn.classList.remove('bg-green-500', 'hover:bg-green-600');
            copyLinkBtn.classList.add('bg-blue-500', 'hover:bg-blue-600');
          }, 2000);
        } catch (err) {
          console.error('复制失败:', err);
          alert('复制失败，请手动复制链接');
        }
      });
    }

    // 页面加载完成后初始化
    document.addEventListener('DOMContentLoaded', () => {
      generateTOC();
      initShareButtons();
    });
  </script>
</Layout>
